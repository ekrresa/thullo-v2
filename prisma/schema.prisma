// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  username      String?        @unique @db.VarChar(100)
  isGuest       Boolean        @default(false) @map("is_guest")
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  boards        BoardMembers[]
  invites       BoardInvite[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Board {
  id          String          @id @default(cuid())
  title       String
  slug        String
  description String?
  image       String?
  isColour    Boolean         @map("is_colour")
  visibility  BoardVisibility
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  users       BoardMembers[]

  @@map("boards")
}

enum BoardVisibility {
  PUBLIC
  PRIVATE
}

model BoardMembers {
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String   @map("board_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  role      Role
  isOwner   Boolean  @default(false) @map("is_owner")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([boardId, userId])
  @@index([boardId])
  @@index([userId])
  @@map("board_members")
}

enum Role {
  ADMIN
  MEMBER
}

model BoardInvite {
  id        String    @id @default(cuid())
  boardId   String
  adminId   String
  role      Role
  accepted  Boolean?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@index([boardId])
  @@index([userId])
  @@map("board_invites")
}
